(define (aq e alist)
  (cdr (assq e alist)))

(define (cdr* l)
  (if (or (pair? l) (list? l))
    (cdr l)
    l))

(define (aq-or e alist o)
  (let ((v (assq e alist)))
    (if v
      (cdr v)
      o)))

(define default-color '(255 0 255 255))

(define (create-source a)
  (let* ((x (aq-or 'x a 100))
         (y (aq-or 'y a 100))
         (size (aq-or 'size a 20))
         (ang (aq-or 'angle a 90))
         (thickness (aq-or 'thickness a 1))
         (reactive (aq-or 'reactive a #t))
         (r (list-ref (aq-or 'color a default-color) 0))
         (g (list-ref (aq-or 'color a default-color) 1))
         (b (list-ref (aq-or 'color a default-color) 2))
         (a (list-ref (aq-or 'color a default-color) 3)))
    (real-create-source x y size ang thickness reactive r g b a)))

(define (draw-line pt1 pt2 thick color)
  (let ((x1 (car pt1))
        (y1 (cdr pt1))
        (x2 (car pt2))
        (y2 (cdr pt2))
        (r (list-ref color 0))
        (g (list-ref color 1))
        (b (list-ref color 2))
        (a (list-ref color 3)))
    (real-draw-line x1 y1 x2 y2 thick r g b a)))
